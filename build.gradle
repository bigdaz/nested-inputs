tasks.register("test", TestTask) {
    out = new File(project.buildDir, "test.out")

    def forward = new Forward()
    forward.backingFile = project.file("${project.rootDir}/src/forward.txt")
    messages.add(forward)

    def backward = new Backward()
    backward.backingFile = project.file("${project.rootDir}/src/backward.txt")
    messages.add(backward)

    def delegate = new Backward()
    delegate.backingFile = project.file("${project.rootDir}/src/delegate.txt")
    def chained = new Chained()
    chained.delegate = delegate
    chained.backingFile = project.file("${project.rootDir}/src/chained.txt")
    messages.add(chained)
}


class TestTask extends DefaultTask {
    @Nested
    List<MessageProvider> messages = new ArrayList<MessageProvider>()

    @OutputFile
    File out

     @TaskAction
     void sayGreeting() {
         def msg = messages.collect({it.value}).join(",")
         println msg
         out.text = msg
     }
}

 interface MessageProvider {
     String getValue()
 }

class Forward implements MessageProvider {
    @InputFile
    File backingFile

    @Internal
    public String getValue() {
        return backingFile.text.trim()
    }
}


class Backward implements MessageProvider {
    @InputFile
    File backingFile

    @Internal
    public String getValue() {
        return backingFile.text.trim().reverse()
    }
}

class Chained implements MessageProvider {
    @Nested
    MessageProvider delegate

    @InputFile
    File backingFile

    @Internal
    public String getValue() {
        return delegate.getValue() + "..." + backingFile.text
    }
}
